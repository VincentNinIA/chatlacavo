import streamlit as st
from openai import OpenAI

# ---------- Configuration ----------
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])
ASSISTANT_ID = st.secrets["ASSISTANT_ID"]  # cr√©√© dans le dashboard OpenAI

# ---------- Helpers mis en cache ----------
@st.cache_resource(show_spinner=False)
def get_thread_id():
    """Un thread distant par session Streamlit."""
    return client.beta.threads.create().id

# ---------- √âtat de l‚Äôinterface ----------
if "show_chat" not in st.session_state:
    st.session_state.show_chat = False
if "history" not in st.session_state:
    st.session_state.history = []

# ---------- Vue d‚Äôintroduction ----------
if not st.session_state.show_chat:
    st.title("Incarnez Carole dans un conflit au travail")
    st.markdown(
        """
        **Bienvenue dans cette simulation de gestion de conflit**.

        Vous incarnez **Carole**, employ√©e dans un fast-food r√©tro ann√©es 80.  
        Votre coll√®gue **JP** (30 ans d‚Äôanciennet√©) est r√©put√© pour son caract√®re bien tremp√© : m√©thodes immuables, critiques fr√©quentes, tensions r√©currentes.

        Aujourd‚Äôhui, un nouvel accrochage vient raviver le conflit.  
        **Votre mission** : engager la discussion, d√©samorcer les tensions et r√©tablir la coop√©ration.

        - Testez votre posture et vos outils de communication.  
        - Tentez de maintenir une relation professionnelle malgr√© la situation tendue.  
        - **Poursuivez la conversation jusqu‚Äô√† ce que l‚Äôassistant affiche ‚ÄúFIN DE SIMULATION‚Äù.**  
          √Ä ce moment-l√†, vous recevrez un **feedback structur√©** sur votre gestion du conflit.
        """
    )
    if st.button("üöÄ Commencer la simulation"):
        st.session_state.show_chat = True
        st.session_state.thread_id = get_thread_id()  # pr√©pare le thread
        st.rerun()
    st.stop()  # emp√™che le reste du script de s‚Äôex√©cuter tant que le chat n‚Äôest pas lanc√©

# ---------- Vue Chat ----------
st.title("üí¨ Simulation de conflit ‚Äî Carole & JP")
thread_id = st.session_state.thread_id

# 1) Rejouer l‚Äôhistorique
for role, content in st.session_state.history:
    with st.chat_message(role):
        st.markdown(content)

# 2) Champ d‚Äôentr√©e utilisateur
if prompt := st.chat_input("Votre message pour JP‚Ä¶"):
    # a) afficher / stocker la question
    st.session_state.history.append(("user", prompt))
    with st.chat_message("user"):
        st.markdown(prompt)

    # b) envoyer au thread distant
    client.beta.threads.messages.create(thread_id=thread_id, role="user", content=prompt)

    # c) r√©ponse streaming
    with st.chat_message("assistant"):
        placeholder = st.empty()
        full_reply = ""
        with client.beta.threads.runs.create_and_stream(
            thread_id=thread_id,
            assistant_id=ASSISTANT_ID,
        ) as stream:
            for event in stream:
                if event.event == "thread.message.delta":
                    delta = event.data.delta
                    for part in delta.content or []:
                        if part.type == "text":
                            full_reply += part.text.value
                            placeholder.markdown(full_reply + "‚ñå")
            stream.until_done()

        # d) rendu final
        placeholder.markdown(full_reply)
        st.session_state.history.append(("assistant", full_reply))

        # e) si l‚Äôassistant signale la fin, afficher un bandeau feedback (placeholder)
        if "FIN DE SIMULATION" in full_reply.upper():
            st.success("Simulation termin√©e ! Un feedback structur√© va s‚Äôafficher sous peu‚Ä¶")
            # √Ä impl√©menter : g√©n√©ration et affichage du feedback.
